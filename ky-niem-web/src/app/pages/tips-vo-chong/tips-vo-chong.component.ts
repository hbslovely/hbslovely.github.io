import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

interface Tip {
  id: number;
  title: string;
  content: string;
  category: string;
  author: string;
  rating: number;
  funLevel: number;
  date: Date;
}

@Component({
  selector: 'app-tips-vo-chong',
  imports: [CommonModule, FormsModule],
  templateUrl: './tips-vo-chong.component.html',
  styleUrls: ['./tips-vo-chong.component.scss']
})
export class TipsVoChongComponent implements OnInit {
  
  selectedCategory: string = 'all';
  
  categories = [
    { value: 'all', label: 'T·∫•t c·∫£', icon: 'pi pi-list' },
    { value: 'communication', label: 'Giao ti·∫øp', icon: 'pi pi-comments' },
    { value: 'romance', label: 'L√£ng m·∫°n', icon: 'pi pi-heart' },
    { value: 'household', label: 'Gia ƒë√¨nh', icon: 'pi pi-home' },
    { value: 'finance', label: 'T√†i ch√≠nh', icon: 'pi pi-money-bill' },
    { value: 'conflict', label: 'H√≤a gi·∫£i', icon: 'pi pi-users' },
    { value: 'fun', label: 'Gi·∫£i tr√≠', icon: 'pi pi-star' }
  ];

  tips: Tip[] = [
    {
      id: 1,
      title: 'Nghe nh·∫°c c√πng nhau m·ªói t·ªëi',
      content: 'M·ªói t·ªëi tr∆∞·ªõc khi ng·ªß, ch√∫ng m√¨nh hay b·∫≠t m·ªôt playlist chung v√† chia s·∫ª c·∫£m x√∫c trong ng√†y. ƒêi·ªÅu n√†y gi√∫p g·∫Øn k·∫øt t√¨nh c·∫£m v√† t·∫°o th√≥i quen t·ªët.',
      category: 'romance',
      author: 'Heo B·ªâm',
      rating: 5,
      funLevel: 4,
      date: new Date('2024-01-15')
    },
    {
      id: 2,
      title: 'Ph√¢n chia vi·ªác nh√† theo th·∫ø m·∫°nh',
      content: 'Thay v√¨ chia ƒë·ªÅu, ch√∫ng m√¨nh ph√¢n c√¥ng theo ƒëi·ªÉm m·∫°nh. Ba Heo gi·ªèi n·∫•u ƒÉn, Heo B·ªâm gi·ªèi d·ªçn d·∫πp. V·∫≠y l√† kh√¥ng ai stress!',
      category: 'household',
      author: 'Ba Heo',
      rating: 5,
      funLevel: 3,
      date: new Date('2024-01-20')
    },
    {
      id: 3,
      title: 'Quy t·∫Øc 24 gi·ªù khi gi·∫≠n nhau',
      content: 'Khi c√≥ m√¢u thu·∫´n, ch√∫ng m√¨nh c√≥ quy t·∫Øc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ qua 24 gi·ªù m√† kh√¥ng n√≥i chuy·ªán. D√π gi·∫≠n c·ª° n√†o c≈©ng ph·∫£i t√¨m c√°ch h√≤a gi·∫£i.',
      category: 'conflict',
      author: 'Ba Heo',
      rating: 4,
      funLevel: 2,
      date: new Date('2024-02-01')
    },
    {
      id: 4,
      title: 'V√≠ chung cho chi ti√™u h√†ng ng√†y',
      content: 'Ch√∫ng m√¨nh c√≥ m·ªôt v√≠ chung ƒë·ªÉ chi ti√™u sinh ho·∫°t, c√≤n l·∫°i m·ªói ng∆∞·ªùi qu·∫£n l√Ω ti·ªÅn ri√™ng. Nh∆∞ v·∫≠y v·ª´a ƒë·ªôc l·∫≠p v·ª´a c√≥ tr√°ch nhi·ªám chung.',
      category: 'finance',
      author: 'Heo B·ªâm',
      rating: 4,
      funLevel: 3,
      date: new Date('2024-02-10')
    },
    {
      id: 5,
      title: 'Date night trong nh√†',
      content: 'M·ªói tu·∫ßn ch√∫ng m√¨nh c√≥ m·ªôt bu·ªïi t·ªëi "date" t·∫°i nh√†: n·∫•u ƒÉn c√πng nhau, xem phim, ch∆°i game. Ti·∫øt ki·ªám m√† v·∫´n vui!',
      category: 'fun',
      author: 'Ba Heo',
      rating: 5,
      funLevel: 5,
      date: new Date('2024-02-14')
    },
    {
      id: 6,
      title: 'N√≥i "em y√™u anh" m·ªói ng√†y',
      content: 'D√π ƒë√£ c∆∞·ªõi nhau r·ªìi, ch√∫ng m√¨nh v·∫´n n√≥i nh·ªØng l·ªùi ng·ªçt ng√†o m·ªói ng√†y. ƒê∆°n gi·∫£n nh∆∞ng l√†m t√¨nh c·∫£m lu√¥n t∆∞∆°i m·ªõi.',
      category: 'communication',
      author: 'Heo B·ªâm',
      rating: 5,
      funLevel: 4,
      date: new Date('2024-02-20')
    },
    {
      id: 7,
      title: 'Surprise nh·ªè h√†ng tu·∫ßn',
      content: 'M·ªói tu·∫ßn m·ªôt ng∆∞·ªùi s·∫Ω chu·∫©n b·ªã surprise nh·ªè cho ng∆∞·ªùi kia. C√≥ th·ªÉ l√† m√≥n ƒÉn y√™u th√≠ch, hoa, hay ch·ªâ m·ªôt l·ªùi nh·∫Øn d·ªÖ th∆∞∆°ng.',
      category: 'romance',
      author: 'Ba Heo',
      rating: 4,
      funLevel: 5,
      date: new Date('2024-03-01')
    },
    {
      id: 8,
      title: 'H·ªçc c√πng nhau m·ªôt k·ªπ nƒÉng m·ªõi',
      content: 'Ch√∫ng m√¨nh c√πng h·ªçc n·∫•u ƒÉn, c√πng t·∫≠p yoga, c√πng h·ªçc ti·∫øng Anh. C√≥ m·ª•c ti√™u chung gi√∫p c·∫£ hai c√πng ph√°t tri·ªÉn.',
      category: 'fun',
      author: 'Heo B·ªâm',
      rating: 4,
      funLevel: 4,
      date: new Date('2024-03-10')
    }
  ];

  newTip: Partial<Tip> = {
    title: '',
    content: '',
    category: 'communication'
  };

  filteredTips: Tip[] = [];

  ngOnInit() {
    this.filterTips();
  }

  filterTips() {
    if (this.selectedCategory === 'all') {
      this.filteredTips = [...this.tips];
    } else {
      this.filteredTips = this.tips.filter(tip => tip.category === this.selectedCategory);
    }
  }

  getTipCategoryColor(category: string): string {
    const colors: { [key: string]: string } = {
      communication: '#3b82f6',
      romance: '#e91e63',
      household: '#10b981',
      finance: '#f59e0b',
      conflict: '#8b5cf6',
      fun: '#f97316'
    };
    return colors[category] || '#6b7280';
  }

  getTipCategoryIcon(category: string): string {
    const categoryObj = this.categories.find(c => c.value === category);
    return categoryObj ? categoryObj.icon : 'pi pi-circle';
  }

  getTipCategoryLabel(category: string): string {
    const categoryObj = this.categories.find(c => c.value === category);
    return categoryObj ? categoryObj.label : 'Kh√°c';
  }

  canSubmitTip(): boolean {
    return !!(this.newTip.title?.trim() && 
              this.newTip.content?.trim() && 
              this.newTip.category);
  }

  submitTip() {
    if (!this.canSubmitTip()) return;

    const tip: Tip = {
      id: Date.now(),
      title: this.newTip.title!.trim(),
      content: this.newTip.content!.trim(),
      category: this.newTip.category!,
      author: 'Ng∆∞·ªùi ƒë·ªçc',
      rating: 4,
      funLevel: 3,
      date: new Date()
    };

    this.tips.unshift(tip);
    this.filterTips();

    // Reset form
    this.newTip = {
      title: '',
      content: '',
      category: 'communication'
    };

    // Show success message (you can add a toast here)
    alert('C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª tip! üéâ');
  }

  getTotalTips(): number {
    return this.tips.length;
  }

  getAverageRating(): string {
    const avg = this.tips.reduce((sum, tip) => sum + tip.rating, 0) / this.tips.length;
    return avg.toFixed(1);
  }

  getMostPopularCategory(): string {
    const categoryCount: { [key: string]: number } = {};
    this.tips.forEach(tip => {
      categoryCount[tip.category] = (categoryCount[tip.category] || 0) + 1;
    });
    
    const mostPopular = Object.keys(categoryCount).reduce((a, b) => 
      categoryCount[a] > categoryCount[b] ? a : b
    );
    
    return this.getTipCategoryLabel(mostPopular);
  }

  getTopContributor(): string {
    const authorCount: { [key: string]: number } = {};
    this.tips.forEach(tip => {
      authorCount[tip.author] = (authorCount[tip.author] || 0) + 1;
    });
    
    return Object.keys(authorCount).reduce((a, b) => 
      authorCount[a] > authorCount[b] ? a : b
    );
  }
}
